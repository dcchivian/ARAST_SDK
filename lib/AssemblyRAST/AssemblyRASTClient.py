# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class AssemblyRAST(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_kiki(self, params, context=None):
        """
        :param params: instance of type "AssemblyParams" (Run individual
           assemblers supported by AssemblyRAST. workspace_name - the name of
           the workspace for input/output read_library_name - the name of the
           PE read library (SE library support in the future)
           output_contig_set_name - the name of the output contigset
           extra_params - assembler specific parameters min_contig_length -
           minimum length of contigs to output, default 200 @optional
           min_contig_len @optional extra_params) -> structure: parameter
           "workspace_name" of String, parameter "read_library_names" of list
           of String, parameter "output_contigset_name" of String, parameter
           "min_contig_len" of Long, parameter "extra_params" of list of
           String
        :returns: instance of type "AssemblyOutput" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'AssemblyRAST.run_kiki',
            [params], self._service_ver, context)

    def run_velvet(self, params, context=None):
        """
        :param params: instance of type "AssemblyParams" (Run individual
           assemblers supported by AssemblyRAST. workspace_name - the name of
           the workspace for input/output read_library_name - the name of the
           PE read library (SE library support in the future)
           output_contig_set_name - the name of the output contigset
           extra_params - assembler specific parameters min_contig_length -
           minimum length of contigs to output, default 200 @optional
           min_contig_len @optional extra_params) -> structure: parameter
           "workspace_name" of String, parameter "read_library_names" of list
           of String, parameter "output_contigset_name" of String, parameter
           "min_contig_len" of Long, parameter "extra_params" of list of
           String
        :returns: instance of type "AssemblyOutput" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'AssemblyRAST.run_velvet',
            [params], self._service_ver, context)

    def run_miniasm(self, params, context=None):
        """
        :param params: instance of type "AssemblyParams" (Run individual
           assemblers supported by AssemblyRAST. workspace_name - the name of
           the workspace for input/output read_library_name - the name of the
           PE read library (SE library support in the future)
           output_contig_set_name - the name of the output contigset
           extra_params - assembler specific parameters min_contig_length -
           minimum length of contigs to output, default 200 @optional
           min_contig_len @optional extra_params) -> structure: parameter
           "workspace_name" of String, parameter "read_library_names" of list
           of String, parameter "output_contigset_name" of String, parameter
           "min_contig_len" of Long, parameter "extra_params" of list of
           String
        :returns: instance of type "AssemblyOutput" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'AssemblyRAST.run_miniasm',
            [params], self._service_ver, context)

    def run_spades(self, params, context=None):
        """
        :param params: instance of type "AssemblyParams" (Run individual
           assemblers supported by AssemblyRAST. workspace_name - the name of
           the workspace for input/output read_library_name - the name of the
           PE read library (SE library support in the future)
           output_contig_set_name - the name of the output contigset
           extra_params - assembler specific parameters min_contig_length -
           minimum length of contigs to output, default 200 @optional
           min_contig_len @optional extra_params) -> structure: parameter
           "workspace_name" of String, parameter "read_library_names" of list
           of String, parameter "output_contigset_name" of String, parameter
           "min_contig_len" of Long, parameter "extra_params" of list of
           String
        :returns: instance of type "AssemblyOutput" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'AssemblyRAST.run_spades',
            [params], self._service_ver, context)

    def run_idba(self, params, context=None):
        """
        :param params: instance of type "AssemblyParams" (Run individual
           assemblers supported by AssemblyRAST. workspace_name - the name of
           the workspace for input/output read_library_name - the name of the
           PE read library (SE library support in the future)
           output_contig_set_name - the name of the output contigset
           extra_params - assembler specific parameters min_contig_length -
           minimum length of contigs to output, default 200 @optional
           min_contig_len @optional extra_params) -> structure: parameter
           "workspace_name" of String, parameter "read_library_names" of list
           of String, parameter "output_contigset_name" of String, parameter
           "min_contig_len" of Long, parameter "extra_params" of list of
           String
        :returns: instance of type "AssemblyOutput" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'AssemblyRAST.run_idba',
            [params], self._service_ver, context)

    def run_megahit(self, params, context=None):
        """
        :param params: instance of type "AssemblyParams" (Run individual
           assemblers supported by AssemblyRAST. workspace_name - the name of
           the workspace for input/output read_library_name - the name of the
           PE read library (SE library support in the future)
           output_contig_set_name - the name of the output contigset
           extra_params - assembler specific parameters min_contig_length -
           minimum length of contigs to output, default 200 @optional
           min_contig_len @optional extra_params) -> structure: parameter
           "workspace_name" of String, parameter "read_library_names" of list
           of String, parameter "output_contigset_name" of String, parameter
           "min_contig_len" of Long, parameter "extra_params" of list of
           String
        :returns: instance of type "AssemblyOutput" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'AssemblyRAST.run_megahit',
            [params], self._service_ver, context)

    def run_ray(self, params, context=None):
        """
        :param params: instance of type "AssemblyParams" (Run individual
           assemblers supported by AssemblyRAST. workspace_name - the name of
           the workspace for input/output read_library_name - the name of the
           PE read library (SE library support in the future)
           output_contig_set_name - the name of the output contigset
           extra_params - assembler specific parameters min_contig_length -
           minimum length of contigs to output, default 200 @optional
           min_contig_len @optional extra_params) -> structure: parameter
           "workspace_name" of String, parameter "read_library_names" of list
           of String, parameter "output_contigset_name" of String, parameter
           "min_contig_len" of Long, parameter "extra_params" of list of
           String
        :returns: instance of type "AssemblyOutput" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'AssemblyRAST.run_ray',
            [params], self._service_ver, context)

    def run_masurca(self, params, context=None):
        """
        :param params: instance of type "AssemblyParams" (Run individual
           assemblers supported by AssemblyRAST. workspace_name - the name of
           the workspace for input/output read_library_name - the name of the
           PE read library (SE library support in the future)
           output_contig_set_name - the name of the output contigset
           extra_params - assembler specific parameters min_contig_length -
           minimum length of contigs to output, default 200 @optional
           min_contig_len @optional extra_params) -> structure: parameter
           "workspace_name" of String, parameter "read_library_names" of list
           of String, parameter "output_contigset_name" of String, parameter
           "min_contig_len" of Long, parameter "extra_params" of list of
           String
        :returns: instance of type "AssemblyOutput" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'AssemblyRAST.run_masurca',
            [params], self._service_ver, context)

    def run_a5(self, params, context=None):
        """
        :param params: instance of type "AssemblyParams" (Run individual
           assemblers supported by AssemblyRAST. workspace_name - the name of
           the workspace for input/output read_library_name - the name of the
           PE read library (SE library support in the future)
           output_contig_set_name - the name of the output contigset
           extra_params - assembler specific parameters min_contig_length -
           minimum length of contigs to output, default 200 @optional
           min_contig_len @optional extra_params) -> structure: parameter
           "workspace_name" of String, parameter "read_library_names" of list
           of String, parameter "output_contigset_name" of String, parameter
           "min_contig_len" of Long, parameter "extra_params" of list of
           String
        :returns: instance of type "AssemblyOutput" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'AssemblyRAST.run_a5',
            [params], self._service_ver, context)

    def run_a6(self, params, context=None):
        """
        :param params: instance of type "AssemblyParams" (Run individual
           assemblers supported by AssemblyRAST. workspace_name - the name of
           the workspace for input/output read_library_name - the name of the
           PE read library (SE library support in the future)
           output_contig_set_name - the name of the output contigset
           extra_params - assembler specific parameters min_contig_length -
           minimum length of contigs to output, default 200 @optional
           min_contig_len @optional extra_params) -> structure: parameter
           "workspace_name" of String, parameter "read_library_names" of list
           of String, parameter "output_contigset_name" of String, parameter
           "min_contig_len" of Long, parameter "extra_params" of list of
           String
        :returns: instance of type "AssemblyOutput" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'AssemblyRAST.run_a6',
            [params], self._service_ver, context)

    def run_arast(self, params, context=None):
        """
        :param params: instance of type "ArastParams" (Call AssemblyRAST.
           workspace_name - the name of the workspace for input/output
           read_library_name - the name of the PE read library (SE library
           support in the future) output_contig_set_name - the name of the
           output contigset extra_params - assembler specific parameters
           min_contig_length - minimum length of contigs to output, default
           200 @optional recipe @optional assembler @optional pipeline
           @optional min_contig_len) -> structure: parameter "workspace_name"
           of String, parameter "read_library_names" of list of String,
           parameter "output_contigset_name" of String, parameter "recipe" of
           String, parameter "assembler" of String, parameter "pipeline" of
           String, parameter "min_contig_len" of Long
        :returns: instance of type "AssemblyOutput" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'AssemblyRAST.run_arast',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('AssemblyRAST.status',
                                        [], self._service_ver, context)
